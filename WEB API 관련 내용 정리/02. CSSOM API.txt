 - CSS (Cascating Style Sheet) 
    : 주로 마크업 언어로 작성된 웹 문서의 스타일과 레이아웃을 정의하기 위해 사용되는 스타일 시트 언어

      # Cascade
         : 폭포나 폭포수 혹은 폭포같이 흐른다는 의미를 지진 명사이자 동사로, 다른 한편으로 연속적인 같은 형용사적 의미도 가짐
            -> CSS에 의해 작성된 스타일 규칙들이 CSS에서 정한 우선순위(하단의 CSS의 스타일 적용 우선순위 참고)에 따라 적용되는 방식이 폭포수와 같이 연속적임을 암시


 - CSS 특징

    1. 문서의 구조와 내용을 분리하여 스타일을 적용할 수 있도록 함
        -> 웹 페이지의 디자인과 레이아웃을 일관성 있게 제어 가능 
           (= 여러 페이지에 동일한 스타일을 적용하거나, 웹 문서의 내용을 수정하지 않고도 스타일을 변경하거나 재사용 가능)

    2. CSS는 선택자(Selector)와 선언부(Declaration Block)로 구성

    3. 상속(Inheritance) 관계를 통해 부모 요소의 스타일을 자식 요소가 상속받음
        -> (주의) body태그 또한 style을 가지고 있고, 이를 통해 기본적으로 모든 HTML에게 body태그의 기본값이 상속된다는 점을 기억해야 함
            -> 보통 body태그의 크기값 덕분에 예상되지 못한 스타일 크기가 적용되는 경우가 많음
                -> normalize를 해야하는 이유

    4. 외부 CSS파일을 불러오거나, HTML내부에서 <style> 태그 안에 작성하거나, HTML 태그에 직접 style 속성을 지정할 수도 있음

    5. 단! CSS 문서에 적용된 스타일은 selector를 전역변수적으로 보고 적용
        -> 공통 CSS를 작성할 때는 진짜로 필요한 내용만 적어서, 내용이 겹치지 않게 해야함

    6. CSS에 작성된 내용들은 우선순위에 따라 적용되는 순서가 다름
       (= 중복된 내용의 경우 우선수위가 높은 순서에 따라 덮어쓰기로 최종 내용이 결정될 수 있음) 

    7. (중요) 완전히 같은 명칭의 선택자나, CSS파일이 link로 여러개 첨부되어 있을 시에는 하단에 위치한 내용이 우선순위가 적용됨


 - CSSOM (CSS Object  Model) API
    : CSSOM은 HTML 문서의 DOM트리와 별개로 웹 페이지의 CSS 스타일 정보를 객체 모델로 표현하여, 효과적으로 선택 및 조작까지 가능하게 해주는 기능
       -> CSS 스타일 시트의 각각의 규칙(rule)을 객체화하여 tree 형식으로 표현하고, 이를 조작하고 변경할 수 있는 기능을 제공
           -> 브라우저는 DOM tree를 참고하여 HTML구조를 잡고, CSSOM tree를 참고하여 styling을 하여 웹페이지의 랜더링을 수행함
    
    # DOM(document object model) VS CSSOM(CSS object model)
       : 어쨌든 DOM과 CSSOM은 상호작용하여 웹페이지의 랜더링과 동적인 조작이 가능하게 함

         @ 차이점
            : 각 모델이 제어하는 객체와 목적이 차이점
               -> DOM(document object model) : HTML 요소들을 트리 구조로 표현하여 이를 조작하고 변경이 목적
               -> CSSOM(CSS object model)    : style sheet의 각각의 규칙을 객체로 표현하여 이를 조작하고 변경이 목적

    # 브라우저의 랜더링 과정
       : 브라우저의 랜더링 엔진이 웹페이지의 구체적인 렌더링을 담당하게 되며 다음과 같은 과정을 거침
         (DOM트리, CSS트리 -> Render 트리 ->  Render & Graphic 레이어 -> Layout 설정 -> 레이어 paint -> composite 레이어 -> GPU텍스처 이미지화 -> 택스터 랜더링)

          1. 작성된 HTML문을 파싱, 각각의 Node로 구성되어 연결된 DOM트리를 구축하여 웹페이지 구조를 잡음
          2. CSS도 마찬가지로 파싱, 적혀있는 스타일 규칙들이 연결된 CSSOM트리를 구축
          3. CSSOM과 스타일규칙과 DOM의 Node들의 정보를 결합하여, Render Object(랜더 객체)로 구축된 Render Tree(랜더 트리)를 생성

          4. Render Tree(랜더 트리)의 내용 중 쳐낼거 쳐내고 최적화할거 최적화해서 Render Layer(랜더 레이어)를 완성
              -> display:none이 포함된 노드는 지우고, 상속적인 스타일은 부모노드에만 위치하게 설계하는 과정이 여기 들어감
                  -> (중요) display:none인 Node가 지워지기에 렌더트리와 DOM트리는 1:1 대응이 아니다!
 
          5. 만약, 렌더레이어가 완성될 때 'GPU에서 처리되는 부분'이 있다면, 이 부분들은 강제적으로 Graphic Layer(그래픽 레이어)로 분리
              -> Grapic 레이어 부분은 GPU가 작업처리를 하기에, 결과적으로 GPU 쓰레드가 비동기처리를 하게 됨

                  ex) CSS3D / video & canvas / filter / animation/ transform : translateZ(0) 등

          6. (4, 5의 과정을 거쳐 만들어진) Render Layer(랜더레이어)을 기반으로 LayOut 설정
               -> 좌표는 보통 부모를 기준으로 설정
               -> Global Layout은 브라우저 화면 크기를 늘리거나 폰트 사이즈가 커지면 변경

          7. Render Layer(랜더레이어)을 대상으로 paint(칠하기) = 레스터화
              -> 이 과정에서 CSS의 color 관련 속성을 처리해줌

          8. 만들어진 레이어(Render & Graphic Layer)들을 합쳐서, 복합 레이어(composite layer)로 만들고 표기하기
              -> 이 과정에서 CSS의 transform, opacity 속성을 처리해줌

          9. (8의 결과로) 각각의 레이어로부터 비트맵이 생성되고, GPU에 텍스처로 업로드..
              -> GPU 텍스처들은 서로 합쳐져 하나의 이미지로 렌더링되어 화면으로 출력되어 마무리



 - CSS 표기 문법
    : (중요) id, class, 태그 셀렉터 + 속성 셀렉터 (Attribute Selector), 가상 클래스 셀렉터 (Pseudo-Class Selector)로 조합을 통해 세밀한 셀렉터 제작 가능!

       selector { property : value;  ...  }
      ---------- ------------------------------
        선택자      선언부(Declaration Block)
                     -> '속성(Property) : 값(Value)' 구조


      # 특수 키워드
        1. !important
            : 스타일 우선순위를 무시하고, 특정 스타일을 강제로 적용하는 키워드로 스타일 규칙 뒤에 !important를 추가하여 사용
               -> (주의) 너무 남발하면 유지보수가 어렵고 다른 스타일 규칙을 무시할 수 있음.. 따라서, 필요한 경우에만 사용해야 함

                ex) color : red !important;
                    : 스타일의 명시도에 따른 우선순위 규칙 다 무시하고, 해당 요소의 색깔은 red로 해라!

        2. !inherit
            : 해당 요소의 특정 속성의 속성값을 부모 요소로부터 상속받도록 지정하는 키워드
               -> (주의) 이 녀석은 속성값으로만 사용될 수 있는 키워드다... 반드시 속성값으로만 사용해야 함!

                ex) color : inherit
                    : 해당 요소의 색깔 속성값은 부모 요소의 color 속성값을 참고해서 적용해라


 - CSS의 전역(global) 속성값 키워드
    : 모든 속성에 사용할 수 있는 특별한 값들에 해당하는 키워드 의미

      1. inherit
          : 해당 속성의 값을 부모 요소로부터 상속

      2. initial
          : 해당 속성의 브라우저 초기값으로 설정

      3. unset
          : 해당 속성의 부모 요소로부터 상속된 값이 있다면 상속받고, 그렇지 않은 경우 초기값으로 설정
            (= inherit와 initial의 조합으로, 브라우저의 기본값이나 부모 요소의 값 중 어느 것을 사용할지 결정하지 않음)

      4. revert
          : 최신 브라우저에서만 지원되는 해당 속성의 브라우저 초기값으로 설정

      5. revert-layer
          : 해당 속성을 다시 계산하지 않고 이전 값으로 되돌디되, 이전 계산 값이 없으면 속성의 초기값으로 돌아감
             -> BUT, 비표준 속성이니 안 써도 ㅈㄴ 무방함


 - CSS의 출처 3종류
    : 말 그대로 CSS가 어디서 정해졌는지의 출처의 근본을 의미하며, 큰 틀에서 이 내용에 따라 우선순위가 나눠어짐

      1. 제작자 스타일 (Author Style)
          : 웹 페이지 문서를 제작하는 개발자들이 웹페이지에서 작성한 CSS의 내용들을 의미
            (= 일반적으로 작성되는 CSS는 다 여기 해당함)
  
      2. 사용자 스타일 (User Style)
          : 웹 페이지를 이용하는 사용자들의 설정이 데이터로 저장된 값으로 인해 구성된 CSS의 내용들을 의미
             ex) 다크모드 적용한 유저는 다크모드용으로 설정한 CSS값들이 적용됨
  
      3. 브라우저 스타일 (Browser Style)
          : 각 회사에서 제작한 브라우저들 개별적으로 기본적으로 지정해 놓은 CSS의 내용들을 의미
             ex) <a> 태그를 통해 link를 걸 경우, 기본적으로 해당 태그의 contents에 해당하는 부분은 파란색 + 밑줄이 쳐짐


 - (중요!) CSS의 스타일 적용 우선순위 
    : Cascading의 폭포수는 이 순서대로 스타일의 우선권이 질서정연하게 적용된다는 걸 의미함
       -> 일반적으로는 '제작자(Author) -> 사용자(User) -> 브라우저(Browser)' 순서를 따름 
          (CSS를 처음 설계할 때 알아야 효율적 + 어떤 CSS를 건들수 없는 상태에서 내 수정내용을 덮어씌우려면 알아야 함)
      
          1st. 사용자 스타일 (User Style) 중 !important 지정 속성
          2nd. 제작자 스타일 (Author Style) 중 !important 지정 속성
          3rd. 제작자 스타일 (Author Style)
             : (제작자 스타일의 경우) 중복되는 부분이 생기면 위에 있는 녀석이 더 힘이 강함
    
             1) Inline 스타일
                 : HTML 요소에 직접 style 속성을 사용해서 스타일을 지정한 경우
    
                   ex) <div style="color: red;">
    
             2) 내부 스타일 시트 (Internal Style Sheet)
                 : HTML 문서의 <style> 태그 내에 CSS 작성 양식으로 스타일을 작성하여 해당 문서 전체에 영향을 주는 경우
    
             3) 외부 스타일 시트 (External Style Sheet)
                 : 외부 CSS 파일에 CSS 작성 양식으로 스타일을 작성하고, 해당 HTML 문서의 <link> 태그를 사용하여 연결한 경우
                   (= 이를 통해, 한번 작성한 CSS 속성과 속성값을 다른 문서에도 적용이 가능함)
    
             4) 상위 요소의 스타일
                 : 해당 요소의 부모 요소에 적용된 스타일이 해당 요소의 스타일과 충돌하는 경우
    
             5) 동일한 요소에 class별, tag별, id별 스타일이 전부 다른 경우
                 : 스타일의 명시도 (Specificity)를 고려해서 우선순위를 따져 결정
                    -> (참고) 여러 selector가 나열되어 디테일이 강조되어 조합되는 경우, 그 만큼 우선순위는 더 높아짐
    
                        ex1) 아이디 선택자(#id) > 클래스 선택자(.class) > 태그 선택자 > *(유니버셜) 선택자

                        ex2) div.container div.box > div.container .box
                              -> div 선택자가 추가된 만큼, 태그 선택자의 우선순위 점수만큼의 디테일 점수가 우선순위에 반영되었다 보면 쉬움 
    
             6) (중요) 1~5까지의 모든 것이 동일
                 : 1 ~ 5까지의 모든것이 동일한 케이스의 경우.. 마지막으로 나오는 규칙이 우선적으로 적용됨
                    -> 그나마 CSS 파일에서 스타일 규칙들의 순서를 조정하여 원하는 스타일을 적용할 수 있는 장점을 제공
    
          4th. 사용자 스타일 (User Style)
          5th. 브라우저 스타일 (Browser Style)
            -> user agent stylesheet라는 명칭으로 적용되어 있는데, 이를 적용하기가 싫으면 appearance속성(auto가 기본값)을 none으로 적용하면 됨


     # CSS 내용 덮어씌우기 TIPS
        1. 처음에 작성하게 되는 CSS는 우선순위가 낮게 설계되는 방향으로 (되도록이면 구체적이지 않게) 선택자를 설계 
            -> 그래야 나중에 CSS가 방대해지는 상황에서 우선순위를 대충 설정해서 선택자를 만들어도 덮어띄우기가 쉬움

                ex) class 이름은 하나만 써서 작성

        2. 남이 작성한 CSS나 내가 작성한 CSS가 방대해지는 상황에서, 현재 작성할 style로 무조건적으로 중대한 수정을 하길 원한다면 높은 우선순위가 적용되도록 style 코드를 짜면 됨


 - 선택자(Selector)와 선언부(Declaration Block) 
    1. 선택자(Selector)
        : HTML 문서나 XML 문서의 특정 요소를 선택하여 스타일을 적용하기 위해 사용되는 패턴 또는 규칙
          (= 스타일 시트에서 웹 문서의 특정 요소를 식별하고 선택하는 방법을 정의하는 규칙)

    2. 선언부(Declaration Block) 
        : 선택자를 통해 선택된 요소에 적용될 스타일 규칙들이 구체적인 내용으로서 포함
           -> JSON의 멤버마냥 [속성(Property) : 값(Value)] 쌍으로 이루어져 있음


 - 선택자(Selector)의 종류 
    : (중요!) 속성 선택자 (Attribute Selector), 가상 클래스 선택자 (Pseudo-Class Selector)는 다른 셀렉터와 함께 조합하여 더 복잡한 선택자를 만들 수도 있음
        -> 단독으로 사용하여 특정 조건에 맞는 요소에 스타일을 적용하는 것도 가능

      # 우선순위 서열 존재하는 선택자들
  
        1st. 아이디 선택자 (ID Selector)
            : #을 사용하며, 해당 문서의 특정 id명을 id속성으로 가진 요소를 선택할 때 사용함
              (= 주로 id를 기입한, 해당 요소는 고유의 뭔가가 있음을 암시할 때 씀)
    
               ex) #id명
    
        2nd. 클래스 선택자 (Class Selector)
            : .를 사용하며, 해당 문서의 특정 class명을 가진 요소들을 선택할 때 사용함
    
               ex) .class명
    
        2nd. 속성 선택자 (Attribute Selector)
            : []를 사용하며, 해당 문서의 특정 속성명에 해당하는 속성을 가진 모든 요소들을 선택할 때 사용함
               -> 이들은 셀렉터와 함께 조합하여 더 복잡한 선택자를 만들 수도 있음
    
               ex) [속성명], [속성명 = "값"], [속성명^ = "값"], [속성명$ = "값"]      <- ^는 속성값의 맨 앞부터 값을 체크, $는 속성값의 맨 뒤에서부터 값을 체크
                     -> .class명[속성명^ = "값"] 같은거 가능
    
               @ 속성 선택자 (Attribute Selector) 종류
                  a. [속성명 = "값"]  : 특정 속성명의 값으로 지정된 값을 가진 요소를 선택
                  b. [속성명 ^= "값"] : 특정 속성명의 값이 지정된 값으로 시작하는 요소를 선택
                  c. [속성명 $= "값"] : 특정 속성명의 값이 지정된 값으로 종료하는 요소를 선택
                  d. [속성명 *= "값"] : 특정 속성명의 값이 지정된 값을 포함하는 요소를 선택된
                  e. [속성명 ~= "값"] : 특정 속성명의 값이 지정된 값을 띄어쓰기로 구분된 '하나의 완전한 단어'로 포함하는 요소를 선택
                  f. [속성명 |= "값"] : 특정 속성명의 값이 -(하이픈)으로 구분된 경우에 한해서, 지정된 값을 접두어로 포함하는 요소를 선택

                  ex) a[href]                          : <a> 태그에 href 속성이 존재하는 요소를 선택하라는 말
                      a[href  = "www.naver.com/en-12"] : <a> 태그에 href 속성의 값이 "www.naver.com"이 존재하는 요소들을 선택하라는 말
                      a[href ^= "www"]                 : <a> 태그에 href 속성의 값이 "www"로 시작되는 요소들을 선택하라는 말
                      a[href $= "com"]                 : <a> 태그에 href 속성의 값이 "com"으로 끝나는 요소들을 선택하라는 말
                      a[href *= "naver"]               : <a> 태그에 href 속성의 값이 어디서라도 "naver"를 포함하는 요소들을 선택하라는 말
                      a[href ~= "naver"]               : <a> 태그에 href 속성의 값 중 '띄어쓰기로 구분된 완전한 단어' "naver"를 포함하는 요소들을 선택하라는 말
                      a[href |= "en"]                  : <a> 태그에 href 속성의 값 중 '하이픈으로 구분된 값' 중 접두어가 "en"과 일치하는 속성 값을 가진 요소를 포함하는 요소들을 선택하라는 말

        2nd. 가상 클래스 선택자 (Pseudo-Class Selector)
            : :를 사용하며, 해당 문서의 특정 HTML요소가 특별한 '상태(state)'값을 가지고 있을 경우에, 어떤 속성을 가져야 할지에 대해 나타냄
               -> 이들은 다른 종류의 셀렉터와 함께 조합하여 더 복잡한 선택자를 만들 수도 있음
                   -> (주의) 단! link , visited , hover , focus , active 순으로 선언하여서 사용하길 권장함
    
               ex) :가상셀렉터명
                     -> '.class명:가상셀렉터명', '태그명:가상셀렉터명' 같은거 가능

               @ 가상 클래스 선택자 (Pseudo-Class Selector) 일반 종류
                  : link , visited , hover , active 순으로 선언하여서 사용하길 권장함

                  a. :link            : href 속성을 가지는 <a> , <area> , <link>와 같은 태그 중 아직 방문하지 않은 경우의 html요소를 선택하는 셀렉터
                  b. :visited         : href 속성을 가지는 <a> , <area> , <link>와 같은 태그 중 아직 방문한 경우의 않은 html요소를 선택하는 셀렉터
                  c. :any-link        : href 속성을 가지는 <a> , <area> , <link>와 같은 태그에 해당하는 모든 html요소를 선택하는 셀렉터
                  d. :active          : 사용자가 클릭을 누르고 있는 상태에 해당하는 경우의 html요소를 선택하는 셀렉터 (= html요소에 대고 버튼 지속해 누르는 상태 의미)
                  e. :hover           : 사용자의 마우스포인터가 요소위에 올라가 있는 경우에 해당하는 html요소를 선택하는 셀렉터
                  f. :focus           : (input이나 form 태그에서) 포커스를 받은 경우에 해당하는 html요소를 선택하는 셀렉터
                  g. :nth-child(숫자)  : 해당 html 요소의 자식에 해당하는 html요소 중 n(숫자)번째 or 짝수(even) or 홀수(odd)에 해당하는 html요소를 선택하는 셀렉터  
                  h. :first-child     : 해당 html 요소의 1번째 자식에 해당하는 html요소를 선택하는 셀렉터  
                  i. :last-child      : 해당 html 요소의 마지막 자식에 해당하는 html요소를 선택하는 셀렉터  
                  j. :not(셀렉터)     : :not(셀렉터) 형태로 사용하는 특정 조건을 만족하지 않는 html요소를 선택하는 셀렉터 (= 부정 선택자)
                  k. :disabled        : 해당 html요소가 비활성화되게 하는 html속성인 disabled 속성이 붙은 html요소들만 선택하는 셀렉터

                  ex) a:link             : 사용자가 아직 방문하지 않은 <a> 태그를 선택하라는 말
                      a:visited          : 사용자가 이미 방문한 <a> 태그를 선택하라는 말
                      a:active           : 사용자가 이미 방문한 <a> 태그를 선택하라는 말
                      a:hover            : <a> 태그의 클릭을 사용자가 지속하는 경우 선택하라는 말
                      input:focus        : 커서 포커싱이 생겼을 경우의 <input> 태그를 선택하라는 말
                      li:nth-child(even) : <li> 태그의 형제 관계에 있는 모든 html요소 중, 짝수 번째에 해당하는 html요소 전부를 선택하라는 말 
                      li:nth-child(odd)  : <li> 태그의 형제 관계에 있는 모든 html요소 중, 홀수 번째에 해당하는 html요소 전부를 선택하라는 말
                      oi:nth-child(3n+2) : <oi> 태그의 형제 관계에 있는 모든 html요소 중, 3의배수 + 2번째에 해당하는 html요소 전부를 선택하라는 말
                      div:not(.exclude)  : <div> 태그에 중 클래스가 .exclude인 요소를 제외한 모든 div 요소를 선택     

               @ input 태그와 연관된 가상 클래스 선택자 (Pseudo-Class Selector) 종류

                  a. :autofill  : input의 value값이 자동채우기 되었을 경우에 해당하는 경우에 그 input요소들을 선택하는 셀렉터
                  b. :blank     : input의 value값이 비었을 경우에 해당하는 경우에 그 input요소들을 선택하는 셀렉터
                  c. :valid     : input의 value값의 형식이 잘 맞는 경우에 그 input요소들을 선택하는 셀렉터
                  d. :invalid   : input의 value값의 형식이 맞지 않는 경우에 그 input요소들을 선택하는 셀렉터
                  e. :required  : 해당 input 태그가 필수로 입력해야 하는 요소인 경우에 해당하는 경우, 그 input요소들을 선택하는 셀렉터
                  f. :checked   : 해당 input 태그의 type이 radio나 check인 경우, 그것이 체크된 경우에 해당하는 그 input요소들을 선택하는 셀렉터

               @ attr(속성명)
                  : 기준으로 잡은 HTML 요소의 속성값을 가져와서 CSS에서 문자열 값으로 사용할 수 있게 해주는 함수
                     -> 주로 가상 요소(Pseudo-element) 또는 가상 클래스(Pseudo-Class)에서 HTML 속성 값을 표시하는 데 사용

                        ex) a::after {content: attr(href); }
                             : <a> 태그의 content 가장 뒤에, <a>태그의 href에 해당하는 값을 문자열로 받아서 붙이라는 의미

        3rd. 태그 선택자 (Tag Selector)
            : HTML 태그명 그 자체로 명명되는 선택자
    
               ex) HTML태그명
    
        4th. 전체 선택자 (Universal Selector)
            : 모든 *로 표시되는 전체 선택자는 가장 낮은 우선순위를 가지며, 모든 요소에 적용
    
               ex) *


      # 우선순위 서열 X 선택자들

        1. 결합자(Combinators)
            : CSS 선택자를 조합하여 요소의 계층 구조나 관계에 따라 특정 요소를 선택하는 데 사용되는 특수한 기호
               -> BUT 4~5개 이상 연달아 붙여쓰면 아주 ㅈ되는게, 심연과 같이 깊어 어디를 나타내는지 알 수 없음 
                  (= 셀렉터를 남발하는 것 보다는 하나의 새로운 클래스를 만드는게 훨씬 더 나음)

                   ex) .container div div>p>span (X)  ->   .headline>span (O)
  
                   1) 자손 결합자(' ')
                       : ID, class, 태그, 속성 셀렉터를 공백문자(' ')를 기점으로 조합하여, 기준 요소의 '계보에 속하는 모든 자손'들 중, [지정된 요소들을 가진 자손 요소]들을 선택하는 셀렉터
                          -> (주의!) HTML에서 어떤 태그에 2개 이상의 class 속성을 줄 떄 사용하는 공백문자(' ') 용도와 전혀 연관없음을 기억하자
               
                          ex) div p
                               : div 요소 내부에 있는 모든 p 요소를 선택
           
                   2) 자식 결합자( > )
                       : ID, class, 태그, 속성 셀렉터를 >를 기점으로 조합하여, 기준 요소의 자신의 '직접적 자식'들 중, [지정된 요소들을 가진 모든 직접적인 자식 요소]를 선택하는 셀렉터
           
                          ex) div > p
                               : div 요소 자신의 직계 자식인 요소들 중, p태그에 해당하는 요소들만 선택
           
                   3) 일반형제 결합자( ~ )
                       : ID, class, 태그, 속성 셀렉터를 ~를 기점으로 조합하여, 기준 요소의 자신보다 밑에 있는 동생위치에 존재하는 요소들 중, 지정된 요소들에 해당하는 [모든 형제 요소(= 동생 요소)]를 선택하는 셀렉터
           
                          ex) div ~ p
                               : div 요소 자신과 같은 단계에 있는 동생 요소들 중, p태그에 해당하는 요소들만 선택
           
                   4) 인접형제 결합자( + )
                       : ID, class, 태그, 속성 셀렉터를 +를 기점으로 조합하여, 기준 요소의 자신보다 밑에 있는 동생요소들 중, 처음으로 지정된 요소가 등장하는 경우에 한하는.. 단! [1개의 맞형제 요소(= 맞동생 요소)]만 선택하는 셀렉터
           
                          ex) div + p
                               : div 요소 자신과 같은 단계에 있는 동생이지만, 처음으로 등장하는 동생 p태그에 해당하는 요소만 선택

        2. 가상 요소(Pseudo-element) 선택자( :: )
            : 어떤 요소를 가리키는 셀렉터 + '::가상요소명' 조합, 어떤 요소를 기준으로 한 특정 부분이나 위치에 있는 요소를 선택
              (= 기존 선택자에 추가하는 키워드 정도로 이해하면 빠름, 존재하지 않는 요소를 존재하는 것처럼 부여하여 문서의 특정 부분 선택이 가능)

               ex) div > p:hover::before
                    : div 요소 자신의 직접적 자식인 p태그에 마우스를 올려놨을 경우, 앞에 있는 요소만 선택    

               @ 가상 요소 선택자 (Pseudo-element Selector) 종류
                  : link , visited , hover , active 순으로 선언하여서 사용하길 권장함

                    a. ::first-letter : (display : block인) 해당 html요소의 text의 첫번쨰 글자만 선택하는 셀렉터
                    b. ::last-letter  : (display : block인) 해당 html요소의 text의 마지막 글자만 선택하는 셀렉터
                    c. ::first-line   : (display : block인) 해당 html요소의 text의 첫번쨰 줄만 선택하는 셀렉터
                    d. ::last-line    : (display : block인) 해당 html요소의 text의 마지막 줄만 선택하는 셀렉터
                    e. ::before       : 해당 html요소의 content 영역 바로 앞 부분에 추가적인 content영역을 삽입하고자 할 때 선택하는 셀렉터
                    f. ::after        : 해당 html요소의 content 영역 바로 뒤 부분에 추가적인 content영역을 삽입하고자 할 때 선택하는 셀렉터
                    g. ::selection    : 해당 html요소에서 사용자가 마우스를 drag하여 문단을 지정해 선택한 부분만 선택하는 셀렉터
  
                       ex) a:before {content : '!'} : <a> 태그 content영역에 !를 가장 앞부분에 추가하라는 말
                           a:after  {content : '!'} : <a> 태그 content영역의 !를 가장 뒤부분에 추가하라는 말

               @ 특정 브라우저 관련 가상 요소 (Pseudo-element) 수식어
                  : 해당 수식어를 가상 요소 셀렉터에 조합해서, CSS는 브라우저의 종류를 감지하고, 해당 수식어가 지정하는 브라우저에서만 특정 스타일이 작동하게 할 수 있음
                     -> BUT, 너무 믿지는 마라.. 까봐야 안다..

                        a. -webkit : 크롬, 오페라, 사파리, Edge 브라우저로 작동되는 경우에 한해서, 해당 가상 요소 셀렉터의 스타일을 적용해라
                        b. -moz    : 파이어폭스 브라우저로 작동되는 경우에 한해서, 해당 가상 요소 셀렉터의 스타일을 적용해라

                           ex) 크롬, 오페라, 사파리, Edge 브라우저에 한정해서만 placeholder속성이 달린 input태그의 스타일을 다음과 같이 적용하라는 말

                               input::-webkit-input-placeholder {
                                 appearance : none;
                                 color : red; 
                               } 

               @ 가상 요소 선택자 (Pseudo-element Selector)에 사용 가능한 속성
                  1) content
                      : 가상 요소(Pseudo-element)를 통해 선택된 요소에 HTML 문서에 정보로 포함되지 않은 요소를 CSS에서 새롭게 생성시켜주는 가짜 속성
                          -> content 속성은 CSS로 아이콘을 넣는 방식의 Font awesome 사용법에도 관련된 속성 

                       - content 속성값으로 들어갈 수 있는 타입들
                          a. normal : 아무것도 표시하지 않는 기본값
                          b. string : 내용을 가진 문자열 생성
                          c. image  : 이미지, 비디오(크기 조절 불가) 생성 (주로 url함수로 가져옴)
                          d. attr(속성명)
                            : 기준으로 잡은 HTML 요소의 속성값을 가져와서 CSS에서 문자열 값으로 사용할 수 있게 해주는 함수
                               -> 주로 가상 요소(Pseudo-element) 또는 가상 클래스(Pseudo-Class)에서 HTML 속성 값을 표시하는 데 사용
           
                                  ex) a:hover::after {content: attr(href); }
                                       : <a> 태그에 마우스가 올라가면, content 가장 뒤에, <a>태그의 href에 해당하는 값을 문자열로 받아서 붙이라는 의미   

                  2) display
                      : 가상 요소(Pseudo-element)를 통해 선택된 요소에 display 속성값을 가진 HTML 태그가 추가               

        3. 그룹화 선택자 ( , )
            : ,를 기점으로 여러가지의 셀렉터를 동시 선택하게 해주는 셀렉터
            
               ex) h1, h2, h3
                    : div 요소 자신의 직접적 자식인 p태그에 마우스를 올려놨을 경우, 앞에 있는 요소들만 선택               

        4. 부정 선택자 ( :not(선택자) )
            : :not(셀렉터) 형태로 사용하는 특정 조건을 만족하지 않는 요소를 선택하는 셀렉터
            
               ex) div:not(.exclude)
                    : div 요소 중 클래스가 .exclude인 요소를 제외한 모든 div 요소를 선택     


 - CSS를 효율적으로 작성하는 요령에 관한 방법론들
    : (참고) vue.js, react.js 같은 프론트엔드 라이브러리나 프레임워크에서는 class명이 중복되어도 컴포넌트끼리 스타일이 간섭되지 않게 코드를 짤 수 있기에 별 쓸데 없을수 있음

      1. Object Oriented CSS (OOCSS)
          : 어떤 html에서 공동으로 사용되는 style과 자주 변경되는 style을 class선택자별로 구분해서 main과 utility로 나누어 적고, 이를 조합해서 작성하는 css구성 및 작성법
            (HTML 요소에 class 속성을 공백문자(' ')를 통해, 2개 이상의 class를 부여할 수 있다는 속성을 이용함)
   
            ex) [CSS 영역 or style 태그 영역]
   
                 // button 컴포넌트 뼈대가 될 main class 선택자의 style
                 .main-btn {
                   font-size : 20px;
                   padding : 15px;
                   border : none;
                   cursor : pointer;
                 }
                 
                 // 팔레트스왑 용도의 utility class 선택자의 style
                 .bg-red {
                   background : red;
                 }
                 .bg-blue {
                   background : blue;
                 }
   
                [HTML body영역]
   
                 // main인 main-btn와 utility에 해당하는 배경쪽 class인 bg-색상을 동시에 부여하여 style구성
                 <button class="main-btn bg-red">빨간버튼</button>
                 <button class="main-btn bg-blue">파란버튼</button>
   
           # OOCSS 장점
              1) 컴포넌트의 뼈대가 되는 main class style이 존재하여, 중복된 스타일을 재사용 가능함
                 (= CSS 파일용량도 줄어들며, 뼈대 style 적용 시간이 줄어듦)
   
              2) CSS 유지보수가 편리해짐
                 (= 기본 뼈대가 되는 부분에 변경이 이뤄지면, 거기 한 군데만 바꾸면 다 적용됨)
   
              3) 자잘한 변경사항을 지니는 utility class도 의미(sementic)를 부여하는 것에 따라서는 코드 적용이 빠르게 일어남
                  -> 가상선택자 :root에 css변수를 사용하는 방식도 어느정도 비슷하다고 볼 수 있음
                 
                  ex) .font-small, .font-medium, .font-lg 이런식으로 부여한 class선택자는 개발자로 하여금 해당 클래스의 용도를 직관적으로 파악가능하게 함
   
      2. BEM 작명법 (Block__Element--Modifer 작명법)
          : class명 작명시의 원칙을 부여하여, 고유성을 가진 명칭을 부여하는 고통을 줄이게 함
   
            ex) <div class="profile">
                  <img class="profile__img">
                  <h4 class="profile__h4">이름</h4>
                  <p class="profile__content">소개글</p>
                  <button class="profile__button--red">빨간버튼</button>
                  <button class="profile__button--blue">파란버튼</button>
                </div>
   
           # BEM 작성단계
              1) 컴포넌트(= 덩어리 = Block)의 주제를 class 작명의 시작점으로 지음 
              2) 같은 컴포넌트 내부의 HTML요소들마다 다른 class명을 부여하려면, __태그명을 뒤에 붙이고, HTML 요소명을 붙임
   
                  ex) profile 안에 있는 img 태그 =  profile__img
                      profile 안에 있는 button 태그 = profile__button
   
              3) 거기서 같은 태그들의 디자인을 기준으로 class명을 구분하고 싶다면, --태그명을 뒤에 붙이고, 구분할수 있는 style 속성값에 대해 붙임
   
                  ex) profile 안에 있는 빨간 button 태그 = profile__button--red
                      profile 안에 있는 큰 button 태그 = profile__button--big
   
      3. (참고) 가상선택자 :root을 사용
         : CSS에서의 가상 선택자(virtual selector) 중 하나로, HTML 문서의 루트 요소  <html> 요소 선택하는 데 사용
          
          # :root와 의미(sementic)를 담은 전역 CSS변수(global CSS variables)를 통한 css값 재사용 방법
             : 의미를 담은 전역 CSS변수를 정의하여 자주 재사용할 값을 담고, 그 변수를 주기적으로 불러와서 쓰기 위해 쓰는 경우 많음
                -> HTML 태그 그 자체는 모든 document 요소의 root에 해당하는 선조이기에, 거기 선언된 CSS변수들은 전역변수 역할이 가능함
   
                   1) root에 '--변수명' 이란 이름을 붙이고, 값을 넣으면
   
                      ex) :root {
                            --main-color: #ff0000;
                            --font-size: 16px;
                          }
   
                   2) var(--변수명)으로 불러와서, 원하는 태그의 css속성값으로 입력이 가능함
   
                      ex) body {
                            color: var(--main-color);       <- color : #ff0000;
                            font-size: var(--font-size);    <- font-size : 16px;
                          }