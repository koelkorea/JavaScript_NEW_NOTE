 - {window 객체} & {global 객체} = JavaScript의 특수성 있는 {전역 객체}
    : JS를 해석하는 프로그램의 런타임 환경 최상위 단계인 전역 스코프 영역 {}에 해당하는 {객체} = 전역변수, 전역함수, 전역객체가 멤버로서 소속 
        -> (중요!) index.html <script> 태그나 index.js와 같은 지정된 실행파일에 적힌 변수, 함수, {객체}는 전역 스코프{}에 실행된 것으로 보면 됨

            ex) 여기서 변수 x는 {window 객체}의 전역변수, 간지나는함수()라는 함수는 {window 객체}의 전역함수(메서드)
            
                <script>
                  var x = 300;

                  function 간지나는함수(){
                    console.log()
                  }
                </script>

            ex) 'window.변수명'은 전역변수, 'window.메서드명 = 무명함수'는 전역함수로 선언된 함수표현식(expression)으로 생각하면 편함

                <script>
                  window.x = 300;

                  window.간지나는함수() = () => console.log();
                </script>


       @ JS런타임 환경의 {전역 객체}들의 종류

          1) {window 객체}
               : JS를 실행 해석하는 주체가 '브라우저'인 경우의 최상위 단계에 존재하는 {전역 객체} 
                 (= 브라우저의 공통 기능 및 상태 정보에 대한 내용을 프로퍼티(= 전역변수), 메서드(= 전역함수)로 가지게 됨)
                      -> (중요) {JS객체}화 된 HTML 요소에 접근하고 조작하는 {DOM 객체} 또한 {window 객체}의 프로퍼티(= 전역 객체)며, alert('문자열'), comfirm('문자열'), prompt('문자열', 초기값) 또한  {window 객체}의 메서드(= 전역 함수)로 보면 됨

          2) {global 객체}
               : JS를 실행 해석하는 주체가 'Node JS'인 경우의 최상위 단계에 존재하는 {전역 객체}
                 (= 'Node JS'의 공통 기능 및 상태 정보에 대한 내용을 프로퍼티(= 전역변수), 메서드(= 전역함수)로 가지게 됨)

       @ 대표적인 {전역 객체}의 메서드들
       
          1) setInterval(콜백함수, (선택) 숫자(ms단위))
              : '숫자(ms단위)'에 해당하는 간격으로 '콜백함수'의 내용부를 반복실행
                  -> (중요) 해당 메서드를 통한 콜백함수의 내용부는 기존 쓰레드(thread)가 순차적으로 코드를 호출 더미(call stack)에 올려 수행하는 것과 별개로 '주요 업무 대기열(Macro task Queue)'에 쌓이는 비동기 코드에 해당
                      -> 이는 호출 더미(call stack)가 끝나고 '부수 업무 대기열(Micro task Queue)'이 끝나고 실행됨

          2) setTimeout(콜백함수, (선택) 숫자(ms단위))
              : '숫자(ms단위)'에 해당하는 시간이 지난뒤 '콜백함수'의 내용부를 실행
                  -> (중요) 해당 메서드를 통한 콜백함수의 내용부는 기존 쓰레드(thread)가 순차적으로 코드를 호출 더미(call stack)에 올려 수행하는 것과 별개로 '주요 업무 대기열(Macro task Queue)'에 쌓이는 비동기 코드에 해당
                      -> 이는 호출 더미(call stack)가 끝나고 '부수 업무 대기열(Micro task Queue)'이 끝나고 실행됨

          3) clearTimeout(타이머)
              : 원하는 setInterval, setTimeout의 진행을 중단시키는 메서드
                  -> (참고) 보통 setInterval, setTimeout를 변수에 대입시켜서 사용함
                      
                      ex) '타이머' 라는 변수에 setInterval, setTimeout의 반환값에 해당하는 {타이머 객체}의 정보가 저장되고, 이를 통해 원하는 진행중인 타이머 메서드에 접근이 가능함
                      
                          var 타이머 = setInterval(콜백함수, 1000);  
                          clearTimeout(타이머);

          3) alert('문자열')
              : 해당 '문자열'을 브라우저가 알림창 형식으로 띄어주는 메서드

          4) prompt('문자열', (선택) '기본값')
              : 해당 '문자열'을 질문으로 띄우면, 사용자가 '값'을 입력하는 것을 대입하여 반환하는 메서드
                 -> 선택인 2번째 인자(augument)인 '기본값'이 있으면, 이를 입력란에 띄우고 시작

          5) comfirm('문자열')
              : 해당 '문자열'을 질문으로 띄우면, 사용자가 yes/no를 선택함에 따라 true/false를 반환하는 메서드

          6) getComputedStyle({Node 객체}) = {Node 객체}.style
              : 해당 DOM요소에 해당하는 {Node 객체}에 전역적으로 적용된 모든 형태의 style속성들을 담은 {CSSStyleDeclaration 객체} 형식으로 반환