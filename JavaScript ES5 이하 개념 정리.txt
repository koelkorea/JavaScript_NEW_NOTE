[JavaScript 기초 정리 (= ES5 이하 정리)]

 - JavaScript
    : 정적인 마크업 언어인 HTML을 웹 브라우저에서 동적으로 조작 및 변경을 목적으로 제작된 '동적타입'을 사용하는 '인터프리터 프로그래밍' 언어
       -> But 요즘에는 node.js라고 브라우저 이외의 JS를 실행가능하게 하는 런타임 환경이 등장하고, 이걸로 웹서버로 백엔드를 실행가능하게 하는 상황까지 왔음

     @ 실행방식에 따른 프로그래밍 언어 분류
        1. 인터프리트 언어(Interpreter Language)
            : 실시간으로 컴퓨터가 소스를 1줄씩 읽고 해석해서 실행하는 방식
               -> (장점) : 실행을 시키는 과정 자체는 간단함
                  (단점) : 컴퓨터가 소스를 읽고 해석하니까 느리다
     
        2. 컴파일 언어(Compiled Language)
            : 사전에 소스를 파싱(parsing)하여 컴퓨터 잘 아는 저수준 언어로 변환한 뒤 한번에 실행
               -> (장점) : 사람이 적은 코드를 분석/검사하여 컴파일하는 시간이 있으니, 용량이 클수록 실행까지 꽤 시간이 소요되며 메모리도 좀 필요함 
                  (단점) : 성능은 매우 빠르며, 코드에 문제가 있으면 컴파일이 이뤄지지 않아서 신뢰성 측면에서 도움이 됨 
    
     @ 데이터 타입에 따른 프로그래밍 언어 분류
        1. 정적 타입 언어(static type)
            : 어떤 변수의 자료형이 '컴파일' 시에 결정되기에 확실하게 자료형을 지정해야 하는 언어 (= 일단 해당되는 언어는 컴파일 언어)
               -> (장점)
                    a. 자료형이 확실하게 정해져있기에, 실행 이후 자료형으로 인한 돌발상황 대처와 추론이 쉬움
                    b. 컴파일 과정에서 미리 자료형이 정해져 있어, 성능 측면에서 유리함
                    c. 문제가 있으면, 컴파일 과정에서 고치기도 쉬움

                  (단점)
                    : 변수가 받을 자료형이 고정되는 셈이라, 유연성은 매우 떨어짐
     
        2. 동적 타입 언어(dynamic/type)
            : 어떤 변수의 자료형이 프로그램이 실행되느 '런타임' 시 결정되는 언어
               -> (장점) : 변수의 자료형이 동적으로 변화가 가능하기에, 유연하게 프로그램이 실행 가능
                  (단점) : 런타임
 