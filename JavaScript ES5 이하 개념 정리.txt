[JavaScript 기초 정리 (= ES5 이하 정리)]

 - JavaScript
    : 정적인 마크업 언어인 HTML을 웹 브라우저에서 동적으로 조작 및 변경을 목적으로 제작된 '약(weak)타입' + '동적타입'을 사용하는 '인터프리터 프로그래밍' 언어
       -> But 요즘에는 node.js라고 브라우저 이외의 JS를 실행가능하게 하는 런타임 환경이 등장하고, 이걸로 웹서버로 백엔드를 실행가능하게 하는 상황까지 왔음

          @ (중요) JS의 특징
             1. 인터프리터 언어(Interpreter Language)
             2. 자료형이 프로그램이 실행되는 '런타임' 시 결정되는 동적 타입(dynamic type) 언어
             3. 함수(fuction)는 '1급 객체((first-class object)'로서 또한 언어 내부에서 '값'으로 표현되고 전달될 수 있는 자료형 중 하나로 취급
                 -> 이같은 특성을 기반으로 다른 함수의 paramter로 사용하거나 return문에서 반환할 수 있는 '고차 함수(first-class object)'를 JS에서 사용 가능
             4. 기본적으로 싱글 쓰레드(single thread)만 사용
             5. {객체}간 상속 관계는 프로토타입(prototype) 기반 구조

          @ (참고) 프로그래밍 언어 분류 기준들
             1. '실행방식'에 따른 프로그래밍 언어 분류
                 1) 인터프리트 언어(Interpreter Language)
                     : 실시간으로 컴퓨터가 소스를 1줄씩 읽고 해석해서 실행하는 방식
                        -> (장점) : 실행을 시키는 과정 자체는 간단함
                           (단점) : 컴퓨터가 소스를 읽고 해석하니까 느리다
              
                 2) 컴파일 언어(Compiled Language)
                     : 사전에 소스를 파싱(parsing)하여 컴퓨터 잘 아는 저수준 언어로 변환한 뒤 한번에 실행
                        -> (장점) : 사람이 적은 코드를 분석/검사하여 컴파일하는 시간이 있으니, 용량이 클수록 실행까지 꽤 시간이 소요되며 메모리도 좀 필요함 
                           (단점) : 성능은 매우 빠르며, 코드에 문제가 있으면 컴파일이 이뤄지지 않아서 신뢰성 측면에서 도움이 됨 
            
             2. '데이터 타입'에 따른 프로그래밍 언어 분류
                 1) 정적 타입 언어(static type)
                     : 어떤 변수의 자료형이 '컴파일' 시에 결정되기에 확실하게 자료형을 지정해야 하는 언어 (= 일단 해당되는 언어는 컴파일 언어)
                        -> (장점)
                             a. 자료형이 확실하게 정해져있기에, 실행 이후 자료형으로 인한 돌발상황 대처와 추론이 쉬움
                             b. 컴파일 과정에서 미리 자료형이 정해져 있어, 성능 측면에서 유리함
                             c. 문제가 있으면, 컴파일 과정에서 고치기도 쉬움
         
                           (단점)
                             : 변수가 받을 자료형이 고정되는 셈이라, 유연성은 매우 떨어짐
              
                 2) 동적 타입 언어(dynamic type)
                     : 어떤 변수의 자료형이 프로그램이 실행되는 '런타임' 시 결정되는 언어
                        -> (장점) : 변수의 자료형이 동적으로 변화가 가능하기에, 유연하게 프로그램이 실행 가능
                           (단점) : 자료형이 런타임 시 유연하게 결정되기 때문에, 문제가 생기면 그 떄 가봐야 알 수 밖에 없음
         
             3. '암묵적인 데이터 타입 변환(Type Casting 또는 Type Conversion) 가능 여부'에 따른 프로그래밍 언어 분류
                 1) 강타입 언어(strong type)
                     : 다른 데이터 타입끼리의 변환이 엄격하게 금지되어 있는 프로그래밍 언어
                       (= 정말 극단적이면 연산자 및 함수의 parameter로서 사용되는 변수의 데이터 타입이 선언된것과 다르면 바로 에러를 발생시킴)
         
                 2) 약타입 언어(weak type)
                     : 다른 데이터 타입끼리의 변환이 가능하며, 심지어 암묵적으로 변환을 해주기도 하는 프로그래밍 언어
                       (= 정말 극단적이면 데이터 타입이 의미가 없다 느껴질 정도로 암묵적으로 변환을 해주는 범위가 넓을수도 있음)


자바스크립트는 html 조작하는 언어라고 했습니다.

근데 조작할 html이 위쪽에 있어야 조작이 잘 됩니다.

자바스크립트를 조작할 html 위에 작성하면 안됩니다.

왜냐면 컴퓨터가 html 파일을 읽을 때 위에서 부터 한줄한줄 읽는데

미리 html을 읽어놔야 조작이 가능하기 때문입니다.



 - JavaScript 문법들

  0. window객체
      : 

  1. 변수(variable)

     @ 

  2. 함수(function)
      : 특정 기능에 해당하는 코드 묶음을 쉽게 불러와서 재사용하기 위해 스코프{}를 지정해놓고 모아서 모듈화해놓은 코드 

       @ 일반적인 함수(function) 문법 사용법 (= 함수 선언식)
          1) 함수 정의하기
          
             a. 함수 선언(function declaration)
                 : 재사용 하길 원하는 코드들을 모으고 {}안에 묶은 뒤, 이를 어떤 이름으로 호출할 것인지에 대한 '함수명'을 명명하고, 그 앞에 해당 {}는 함수임을 알리는 function이란 예약어를 작성
                    -> 해당 함수(function)를 상황에 따라 동적으로 사용하고 싶다면, 함수 선언 시 동적인 역할을 수행할 코드에 사용된 변수에를 parameter로 넣을 수 있도록 ()안에 parameter 변수를 정의하고, 내용부에서 사용함
                 
                       ex) '함수명'이란 함수 선언 예시
                       
                           function 함수명(... parmeter들){
                           
                             재사용을 하길 원하는 코드..
                             parameter에 해당하는 변수도 사용해도 됨
                           
                             return 영역  <- (생략해도 됨)
                           }

             b. 함수 표현식(function expression) 
                 : 재사용 하길 원하는 코드들을 모으고 {}안에 묶고 그 앞에 해당 {}는 함수임을 알리는 function이란 예약어를 작성하는 것까지는 같지만, '함수명'을 명명하지 않는 무명함수 방식으로 변수에 할당하여 작성
                    -> 마찬가지로 parameter로 넣을 수 있도록 ()안에 parameter 변수를 정의하고, 내용부에서 사용하면 해당 함수를 상황에 따라 유연하게 적용 가능            
                 
                       ex) greet라는 변수에 저장된 표현식 형식의 함수 예시

                           const 함수명 = function(... parmeter들){

                             재사용을 하길 원하는 코드..
                             parameter에 해당하는 변수도 사용해도 됨
                           
                             return 영역  <- (생략해도 됨)
                           };

                                            된함수 선언과 달리 함수 표현식은 코드의 특정 부분에서 동적으로 정의될 수 있습니다.

  
          2) 함수(function) 호출
              : 선언했던 함수의 '함수명'의 선언부에 해당하는 형식대로 '함수명(...paramter들)'을 작성하면, 런타임 상황에서 해당 함수명의 내용부를 실행
                (= 사용을 원하는 위치에 '함수명(...paramter들)'을 작성하면 간단하게 원하는 코드를 재사용이 가능함)
              
                ex) '함수명'이란 함수 or 표현식 호출하기
                
                     함수명(... parmeter들);
  
       @ 함수 선언(function declare) VS 함수 표현식(function expression)
          
          1. 호이스팅(Hoisting) 여부
              : 함수의 선언 및 작성 위치와 상관없이, 프로그램이 코드 실행전 무조건 코드의 가장 최상위로 올려두는지 여부
                 -> 원본 코드의 실행 순서대로의 전개가 전혀 달라질 수 있는 사안이 될 수 있음

               a. 함수 선언 (Function Declaration)
                   : 코드 실행 전에 최상단에 호이스팅 되어 무조건 함수 호출부에서 함수를 발견하지 못하는 문제가 생기지 않도록 만듦 

               b. 함수 표현식 (Function expression)
                   : 호이스팅과 전혀 관계가 X
                     (= 함수 표현식의 형태로 어떤 변수에 함수가 할당되기 전에 함수를 호출해도, 원본대로 )

       @ arrow function(화살 함수)
          : ES6에서부터 함수를 보다 단순하게 표현하는 방법론에 해당하는 '람다 대수' 개념을 받아들여, '람다 표현식'에 해당하는 화살표(=>)를 이용해서 무명함수를 더 단순하게 작성할 수 있도록 개선한 문법
             -> (중요) arrow function(화살 함수) = '람다 표현식' = 무명함수를 작성하는 새로운 방식이나 다름없음 
                       (= 변수에 함수를 대입하는 '함수 표현식'과 아주 밀접한 관계를 이룸)

                 # 기존 무명함수 선언식 -> arrow function(화살 함수) 작성법
                    1) function 예약어 대신 화살표(=>)를 함수의 몸체로 사용
                    2) 함수의 내용부가 1줄이면(= 단일 실행문) 괄호{}를 생략 가능
                        -> (주의) return문으로만 내용이 구성되어 있는 경우 {}는 생략 불가
                    
                            ex) function(...parameter){ 내용 }   ->   (...parameter) => { 내용 }

       @ 함수(function) 사용시 특이사항
          1) 함수명을 영어로 작명한다면? camelCase로 작명하는게 관습 
             (= kebab-case로 작성해도 기능에는 문제가 없음)

          2) 함수를 호출해서 실행하도록 하고 싶으면, '함수명()'와 같이 반드시 ()까지 같이 입력해 줌

          3) 함수 선언시 내용부를 마무리 시 return 문은 생략해도 상관은 없음
              -> 물론 생략한다고 해도, 프로그램은 내부적으로 return 0;과 같은 형태의 return문을 임의로 작성함

          4) JS에서 함수(fuction)는 '1급 객체(first-class object)'로서 또한 언어 내부에서 '값'으로 표현되고 전달될 수 있는 자료형 중 하나로 취급
              -> 함수(fuction)의 parameter에는 어떤 함수 그 자체가 parameter로 들어가거나 return 값이 되기도 하는 '고차 함수(first-class object)'로서 사용이 가능
                 (= parameter로 함수가 들어가 콜백함수나 return 값으로 사용될 수 있다는 건, 함수가 변수에 대입될 수 있다는 것)

          5) (중요) '함수명()'과 '함수명'은 명확히 다른 의미를 지님
               -> '함수명()' : function인 함수명()을 호출하여, 그 내용부를 parameter 자리에 들어온 값을 대입해 실행하라는 의미
                  '함수명'   : function인 함수명()의 해당 함수 그 자체를 값으로 사용하는 방식

       @ 즉시 실행 표현식 (IIFE)
          : {window 객체}에 해당하는 전역 {} 범위를 오염시키지 않는 무명 함수를 선언하자마자 즉시 실행되는 함수를 만드는 방법
              
            ex) IIFE 형식은 다음과 같은 형식으로 선언과 동시에 호출이 되는 구조
              
                ( function(){ 내용 } )(); 




  3. 조건문

     @ 

  4. 조건문

     @ 