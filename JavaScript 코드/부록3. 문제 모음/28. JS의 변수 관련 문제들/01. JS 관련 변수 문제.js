// [JS 변수 관련 개념 TEST 문제들]
//   -> var, let, const의 특성을 잘 알고 있어야 함

// Q1. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요? -> (답) 2
//  -> why? 왜냐하면 변수 b는 함수 스코프{}를 따르기에, 전역변수로서 영향을 미치며, 2번쨰 if의 let으로 선언된 b는 블록 스코프{}를 따라서 1번째 스코프에는 영향을 못 끼짐

if (true) {

    let a = 1;
    var b = 2;

    if (true) {
        let b = 3;
    }

    console.log(b); // 2가 출력됨
}

// Q2. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요? -> (답) 안녕1이란 변수가 초기화되기 전이라 접근할 수 없다는 판정의 에러
//  -> why? function 함수야 자동으로 호이스팅(hoisting)이 되서 실행에는 문제가 전혀 없으나, 그 내부의 지역변수 let은 블록스코프{} 영역과 자신의 선언위치를 칼같이 따지기 떄문에 벌어진일

함수1();

function 함수1() {
  console.log(안녕1);
  let 안녕1 = 'Hello!';
} 

// Q3. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요? -> (답) 함수2는 함수가 아니라는 판정의 에러 
//  -> why? var변수는 자동으로 호이스팅(hoisting)이 되지만, 그 대입된 값까지는 가져가서 호이스팅(hoisting)하지 않기에, var 변수인 함수2는 있어도 그것은 값이 없기에 함수가 아니라는 에러가 남

함수2();

var 함수2 = function() {
  console.log(안녕2);
  var 안녕2 = 'Hello!';
} 

// Q4. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요?  -> (답) 1
//  -> why? 함수3이란 함수표현식은 호출된 적도 없으니, a3의 값은 계속 그대로임

let a3 = 1;

var 함수3 = function() {
  a3 = 2;
}

console.log(a3);  // 1

// Q5. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요? -> (답) 8, 5
//  -> 브라우저에서는 전역변수로 선언된 var인 b4는 {전역 객체}의 프로퍼티인 window.b4와 같은 메모리 주소를 공유
//     (= let 변수는 블록스코프{}를 기준으로 삼는 변수로서, 전역변수로 선언되도 {전역 객체}의 프로퍼티와는 메모리 주소도 별개고, 동기화되지도 않음)

let a4 = 1;
var b4 = 2;
window.a4 = 3;
window.b4 = 4;

console.log(b4 + window.b4);  // 8 = 4 + 4
console.log(a4 + window.b4);  // 5 = 1 + 4

// Q6. 다음 코드를 실행하면 콘솔창에 무엇이 뜰까요? -> (답) 6, 6
//  -> Node.js에서는 전역변수로 선언된 var는 let과 마찬가지로 b5와 {전역 객체}의 프로퍼티인 global.b5와 별개의 변수로 취급됨
//     (Node js에서는 var나 let이나 {global 객체}의 프로퍼티가 될 일이 없음)

let a5 = 1;
var b5 = 2;
global.a5 = 3;
global.b5 = 4;

console.log(b5 + global.b5);  // 6 = 2 + 4
console.log(b5 + global.a4);  // 6 = 2 + 4