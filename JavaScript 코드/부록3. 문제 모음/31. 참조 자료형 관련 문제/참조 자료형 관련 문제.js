// Q1. 이름1, 이름2를 출력하면 각각 무엇이 나올까요?
//  -> A : 이름1, 이름2 둘 다 { name : '박' } 출력 

var 이름1 = { name : '김' };
var 이름2 = 이름1;
이름1.name = '박';


// Q2. 이름3 == 이름4 이렇게 두개를 같다고 비교하면 true가 나올까요 false가 나올까요?
//  -> A : false 가 나오게 됨... 이름3과 이름4는 내용은 비슷하지만, 각자 다른 {리터럴 객체} 생성하여 다른 메모리 위치에 저장하고 있으며, 그 다른 참조값을 저장하고 있기 때문

var 이름3 = { name : '김' };
var 이름4 = { name : '김' };
console.log(이름3 == 이름4);


// Q3. (응용) 변경(객체명)을 통해 {객체}의 내용을 바꾸고자 하는데, 실행해봐도 이름1은 바뀌지 않습니다. 왜 그럴까요?
//  -> A : parameter 변수인 obj는 결국 다른 {리터럴 객체}를 생성하고, 그 {객체}가 저장된 메모리 위치의 '참조값'을 저장한 것이기 때문
//         (= obj는 이름1의 프로퍼티에 접근한 적조차 없음)

//  (해설)
//    변경(이름1); 을 호출하여 실행하면 그 내용부의 흐름은 다음과 같음
//      -> function 변경(obj = 이름1){
//            obj = { name : 'park' };
//         }

//      -> 처음에 obj는 이름1 변수가 저장하는 {객체}의 참조값을 받아 저장한건 맞으나.. 
//         그 직후 생성된 { name : 'park' }이라는 {리터럴 객체}가 저장된 참조값을 새로 저장하였기에, 그 시점에서 이름1의 참조값은 관련이 없게 되어버림

var 이름1 = { name : '김' };

function 변경(obj){
    obj = { name : 'park' };
}

변경(이름1);
console.log(이름1);